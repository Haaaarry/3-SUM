//概要：3-SUM是基于2-SUM时间复杂度为n*n的实现。
//
//2-SUM简要描述:
//-2-sum是指，给定一个target，在一个数组int []b中找到两个下标i，j使得b[i]+b[j]==target
//2-SUM实现方法：
//使两个整数p,q指向数组b首尾两端，得到temp=b[p]+b[q]
//    如果temp>target，把p向右移动一位，得到新的temp=b[p]+b[q]
//    如果temp<target，把q向左移动一位，得到新的temp=b[p]+b[q]
//    如果temp==target，输出结果
//    重复以上三个步骤直到p,
//
//3-SUM问题简要描述：在一串从小到大排序的数组int []a中，找到三个i,j,k使得a[i]+a[j]+a[k]=0;
//3-SUM实现方法简要描述:
//  根据2-SUM的描述，3-SUM问题实际上就是做一个循环，
//  每个循环把a[i]作为一个target，再使用2-SUM的思想加以实现
//  
struct pair{
  int i;
  int j;
};

pair threeSum(int a[]){
    int n=a.length;
    for(int i=0;i<n;i++){
        int left=i+1,right=n-1;//这里设置成i+1,是防止重复找；
        while(left<right){
           if(a[left]+a[right]==-a[i])
              return pair(left,right);
           else if(a[left]+a[right]>-a[i])
              right--;
           else
              left++;
        }
    }
    return pair(-1,-1);
}
